labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="ML Method")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="serif")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="Method")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="serif")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar() +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="serif")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="serif")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
View(df)
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set4") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=method, y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of ML Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Relative Efficiencies of Methods for Binary Outcomes", x="Method",
y="Relative Efficiency", fill="")
p
df <- data.frame(method = c("None", "Linear Model", "Additive Model", "Regression Tree", "Random Forest",
"Super Learner"), vals = c(1.000, 1.097, 1.097, 1.246, 1.198, 1.260))
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="Method",
y="Relative Efficiency", fill="Machine Learning Method")
p
df <- data.frame(method = c("None", "Linear Model", "Additive Model", "Regression Tree", "Random Forest",
"Super Learner"), vals = c(1.000, 1.097, 1.097, 1.246, 1.198, 1.260))
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="Method",
y="Relative Efficiency", fill="ML Method")
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method")
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Linear Model", "Additive Model", "Regression Tree", "Random Forest",
"Super Learner"))
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(), text=element_text(family="sans")) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p
p <- ggplot(data=df, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p
df.cont <- data.frame(method = c("None", "Linear Model", "Additive Model", "Regression Tree", "Random Forest",
"Super Learner"), vals = c(1.000,	1.278,	1.283,	1.612,	1.588,	1.762))
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
# coord_cartesian(ylim = c(1, 1.3)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 2.5)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 2)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 1.8)) +
labs(title="Binary Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p
p.cont
#non-binary
df.cont <- data.frame(method = c("None", "Linear Model", "Additive Model", "Regression Tree", "Random Forest",
"Super Learner"), vals = c(1.000,	1.278,	1.283,	1.612,	1.588,	1.762))
p.cont <- ggplot(data=df.cont, aes(x=reorder(method, vals), y=vals, fill = method)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set3") +
theme(axis.text.x=element_blank(),
text=element_text(family="sans"),
plot.title = element_text(hjust = 0.5)) +
coord_cartesian(ylim = c(1, 1.8)) +
labs(title="Continuous Outcome", x="ML Method",
y="Relative Efficiency", fill="ML Method") +
scale_fill_discrete(breaks=c("None", "Additive Model", "Linear Model",  "Random Forest", "Regression Tree",
"Super Learner"))
p.cont
p
df <- data.frame(matrix(ncol = 4, nrow = 0))
x <- c("date", "currentCaseCount", "lat", "long")
colnames(df) <- x
setwd("~/")
View(df)
as.Date('1999/01/01')
sample(118380806 : 118586638, 1) / 1000000
sample(118380806 : 118586638, 1) / 1000000
sample(118380806 : 118586638, 1) / 1000000
sample(118380806 : 118586638, 1) / 1000000
for(i in 1:1000){
city <- "Los Angeles";
date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1)
case_count = sample(1:100, 1)
lat = sample(34148815 : 34281433, 1) / 1000000
lng = sample(118380806 : 118586638, 1) / 1000000
df <- rbind(df, c(city, date, case_count, lat, lng));
}
df <- data.frame(matrix(ncol = 4, nrow = 0))
x <- c("city", "date", "currentCaseCount", "lat", "long")
colnames(df) <- x
df <- data.frame(matrix(ncol = 5, nrow = 0))
x <- c("city", "date", "currentCaseCount", "lat", "long")
colnames(df) <- x
for(i in 1:1000){
city <- "Los Angeles";
date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1)
case_count = sample(1:100, 1)
lat = sample(34148815 : 34281433, 1) / 1000000
lng = sample(118380806 : 118586638, 1) / 1000000
df <- rbind(df, c(city, date, case_count, lat, lng));
}
warnings()
df <- data.frame(city = "Los Angeles",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 10),
currentCaseCount = sample(1:100, 10),
lat = sample(34148815 : 34281433, 10) / 1000000,
lng = sample(118380806 : 118586638, 10) / 1000000
)
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 10),
currentCaseCount = sample(1:120, 10),
lat = sample(42355743 : 42439923, 10) / 1000000,
lng = -sample(83273563 : 82960810, 10) / 1000000
)
View(df2)
df <- data.frame(city = "Los Angeles",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000),
currentCaseCount = sample(1:100, 1000),
lat = sample(34148815 : 34281433, 1000) / 1000000,
lng = -sample(118380806 : 118586638, 1000) / 1000000
)
# top right: 42.445837, -82.960810
# top left: 42.439923, -83.273563
# bottom right: 42.369587, -82.959251
# bottom left: 42.355743, -83.251653
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000),
currentCaseCount = sample(1:120, 1000),
lat = sample(42355743 : 42439923, 1000) / 1000000,
lng = -sample(83273563 : 82960810, 1000) / 1000000
)
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000),
currentCaseCount = sample(1:120),
lat = sample(42355743 : 42439923, 1000) / 1000000,
lng = -sample(83273563 : 82960810, 1000) / 1000000
)
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000),
currentCaseCount = sample(1:120, 1000, replace = FALSE),
lat = sample(42355743 : 42439923, 1000) / 1000000,
lng = -sample(83273563 : 82960810, 1000) / 1000000
)
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000),
currentCaseCount = sample(1:120, 1000, replace = TRUE),
lat = sample(42355743 : 42439923, 1000) / 1000000,
lng = -sample(83273563 : 82960810, 1000) / 1000000
)
df2 <- data.frame(city = "Detroit",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE),
currentCaseCount = sample(1:120, 1000, replace = TRUE),
lat = sample(42355743 : 42439923, 1000, replace = TRUE) / 1000000,
lng = -sample(83273563 : 82960810, 1000, replace = TRUE) / 1000000
)
df <- data.frame(city = "Los Angeles",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE),
currentCaseCount = sample(1:100, 1000, replace = TRUE),
lat = sample(34148815 : 34281433, 1000, replace = TRUE) / 1000000,
lng = -sample(118380806 : 118586638, 1000, replace = TRUE) / 1000000
)
df3 <- data.frame(city = "New York City",
date = date <- sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE),
currentCaseCount = sample(1:120, 1000, replace = TRUE),
lat = sample(40653374 : 40755219, 1000, replace = TRUE) / 1000000,
lng = -sample(73733747 : 73949590, 1000, replace = TRUE) / 1000000
)
write.table(df, "test_dat.csv", col.names=TRUE, sep=",")
write.table(df2, "test_dat.csv", col.names=FALSE, sep=",", append=TRUE)
write.table(df3, "test_dat.csv", col.names=FALSE, sep=",", append=TRUE)
df <- data.frame(city = "Los Angeles",
date <- as.character(sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE)),
currentCaseCount = sample(1:100, 1000, replace = TRUE),
lat = sample(34148815 : 34281433, 1000, replace = TRUE) / 1000000,
lng = -sample(118380806 : 118586638, 1000, replace = TRUE) / 1000000
)
df <- data.frame(city = "Los Angeles",
date = as.character(sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE)),
currentCaseCount = sample(1:100, 1000, replace = TRUE),
lat = sample(34148815 : 34281433, 1000, replace = TRUE) / 1000000,
lng = -sample(118380806 : 118586638, 1000, replace = TRUE) / 1000000
)
df <- data.frame(city = "Los Angeles",
date = as.character(sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE)),
currentCaseCount = sample(1:100, 1000, replace = TRUE),
lat = sample(34148815 : 34281433, 1000, replace = TRUE) / 1000000,
lng = -sample(118380806 : 118586638, 1000, replace = TRUE) / 1000000
)
# top right: 42.445837, -82.960810
# top left: 42.439923, -83.273563
# bottom right: 42.369587, -82.959251
# bottom left: 42.355743, -83.251653
df2 <- data.frame(city = "Detroit",
date = as.character(sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE)),
currentCaseCount = sample(1:120, 1000, replace = TRUE),
lat = sample(42355743 : 42439923, 1000, replace = TRUE) / 1000000,
lng = -sample(83273563 : 82960810, 1000, replace = TRUE) / 1000000
)
df3 <- data.frame(city = "New York City",
date = as.character(sample(seq(as.Date('2019/11/29'), as.Date('2020/03/27'), by="day"), 1000, replace = TRUE)),
currentCaseCount = sample(1:120, 1000, replace = TRUE),
lat = sample(40653374 : 40755219, 1000, replace = TRUE) / 1000000,
lng = -sample(73733747 : 73949590, 1000, replace = TRUE) / 1000000
)
write.table(df, "test_dat.csv", col.names=TRUE, sep=",")
write.table(df2, "test_dat.csv", col.names=FALSE, sep=",", append=TRUE)
write.table(df3, "test_dat.csv", col.names=FALSE, sep=",", append=TRUE)
shiny::runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
View(dset)
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
install.packages("stringr")
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
length(vars)
runApp('Drug/gsrs_dashboardv4')
length(vars2)
runApp('Drug/gsrs_dashboardv4')
install.packages("shinyalert")
runApp('Drug/gsrs_dashboardv4')
install.packages("xlsx")
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp()
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
install.packages("writexl")
shiny::runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
summary(dset$CASE_COUNT)
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
summary(dset$CASE_Count)
summary(dset$CASE_COUNT)
summary(dset$PT_COUNT)
runApp('Drug/gsrs_dashboardv4')
runApp('Drug/gsrs_dashboardv4')
require(jsonlite)
GET(paste("https://api.fda.gov/drug/label.json?search=", drug))
)
drug = "Metformin"
GET(paste("https://api.fda.gov/drug/label.json?search=", drug))
require(httr)
n"
GET(paste("https://api.fda.gov/drug/label.json?search=", drug))
GET(paste("https://api.fda.gov/drug/label.json?search=", drug, sep=""))
call <- GET(paste("https://api.fda.gov/drug/label.json?search=", drug, sep=""))
content(call)
drug_json <- fromJSON(call, flatten = TRUE)
drug_json <- fromJSON(content(call), flatten = TRUE)
drug_json <- fromJSON(content(call, "text"), flatten = TRUE)
drug_json
View(drug_json)
event_call <- GET(paste("https://api.fda.gov/drug/event.json?search=", drug, sep=""))
event_json <- fromJSON(content(event_json, "text"), flatten = TRUE)
event_json <- fromJSON(content(event_call, "text"), flatten = TRUE)
View(event_json)
drug_json[["results"]][["drug_interactions"]][[1]]
ndc_call <- GET(paste("https://api.fda.gov/drug/ndc.json?search=", drug, sep=""))
ndc_json <- fromJSON(content(ndc_call, "text"), flatten = TRUE)
View(ndc_json)
drug = "Metformin"
enf_call <- GET(paste("https://api.fda.gov/drug/enforcement.json?search=", drug, sep=""))
enf_json <- fromJSON(content(enf_call, "text"), flatten = TRUE)
View(enf_json)
enf_json[["results"]][["reason_for_recall"]]
View(ndc_json)
View(event_json)
event_json[["meta"]][["results"]][["total"]]
View(label_json)
label_call <- GET(paste("https://api.fda.gov/drug/label.json?search=", drug, sep=""))
label_json <- fromJSON(content(label_call, "text"), flatten = TRUE)
View(label_json)
View(label_json)
View(ndc_json)
install.packages("shinycssloaders")
devtools:document()
devtools::document()
setwd("~/SLEETE")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::install()
?sleete
devtools::install_github("czhang2718/sleete")
devtools::document()
install.packages("SuperLearner")
R_REMOTES_NO_ERRORS_FROM_WARNINGS="true"
devtools::install_github("czhang2718/sleete")
setwd("~/sleete")
devtools::install_github("czhang2718/sleete")
install.packages('devtools')
devtools::install_github("czhang2718/sleete")
install.packages('remotes')
install.packages("remotes")
R_REMOTES_NO_ERRORS_FROM_WARNINGS="true"
remotes::install_github(czhang2718/sleete)
remotes::install_github(czhang2718/sleete"")
remotes::install_github("czhang2718/sleete")
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
remotes::install_github("czhang2718/sleete")
devtools::document()
remotes::install_github("czhang2718/sleete")
remotes::install_github("czhang2718/sleete", force=TRUE)
remotes::install_github("czhang2718/sleete")
setwd("~/FDA Drug Dashboard/gsrs_dashboardv6")
devtools::document()
devtools::document()
install.packages('remotes')
library('remotes')
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
remotes::install_github("czhang2718/sleete")
install.packages("remotes")
?sleete
setwd("~/sleete")
install.packages('SuperLearner')
devtools::install_github('czhang2718/sleete')
library(installr)
install.packages(installr)
install.packages('installr')
library(installr)
updateR()
